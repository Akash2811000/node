import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fire_base_demo/src/presentation/cubit/login_cubit.dart';
import 'package:fire_base_demo/src/presentation/cubit/sign_in_state.dart';
import 'package:fire_base_demo/src/presentation/pages/Loginpage.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../cubit/dashbord_cubit.dart';

class Dashboard extends StatefulWidget {
  const Dashboard({Key? key}) : super(key: key);

  @override
  _DashboardState createState() => _DashboardState();
}

class _DashboardState extends State<Dashboard> {
  // text fields' controllers
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _ageController = TextEditingController();

  final CollectionReference _productss =
      FirebaseFirestore.instance.collection('user');

  final formGlobalKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<Dashboardcubit, SignInState>(
      builder: (context, state) {
        return Scaffold(
          appBar: AppBar(
            title: const Text('Dashboard'),
            automaticallyImplyLeading: false,
            actions: [
              TextButton(
                  child: const Text(
                    'Log out',
                    style: TextStyle(color: Colors.white),
                  ),
                  onPressed: () async {
                    final SharedPreferences sharedPreferences =
                        await SharedPreferences.getInstance();
                    sharedPreferences.remove('email');
                   // _navigateToLoginScreen(context);
                    //Navigator.of(context).pushNamedAndRemoveUntil('/screen2', ModalRoute.withName('/screen2'));
                    Navigator.of(context).pushNamedAndRemoveUntil('/screen2', (Route<dynamic> route) => false);
                    debugPrint('Log out');
                  }),
            ],
          ),
          // Using StreamBuilder to display all products from Firestore in real-time

          body: StreamBuilder(
            stream: _productss.orderBy('name',descending:false).snapshots(),
            builder: (context, AsyncSnapshot<QuerySnapshot> streamSnapshot) {
              if (streamSnapshot.hasData) {
                return ListView.builder(
                  itemCount: streamSnapshot.data!.docs.length,
                  itemBuilder: (context, index) {
                    final DocumentSnapshot documentSnapshot =
                        streamSnapshot.data!.docs[index];
                    final name =
                        TextEditingController(text: documentSnapshot['name']);
                    final age =
                        TextEditingController(text: documentSnapshot['age']);
                    return Card(
                      margin: const EdgeInsets.all(10),
                      child: ListTile(
                        title: Text(
                          documentSnapshot['name'],
                          style: const TextStyle(
                              fontSize: 25, fontWeight: FontWeight.bold),
                        ),
                        subtitle: Text(
                          documentSnapshot['age'].toString(),
                          style: const TextStyle(fontSize: 25),
                        ),
                        trailing: SizedBox(
                          width: 100,
                          child: Row(
                            children: [
                              IconButton(
                                icon: const Icon(Icons.edit),
                                onPressed: () => showDialog(
                                  context: context,
                                  builder: (ctx) => AlertDialog(
                                    title: const Text("Enter your details"),
                                    actions: <Widget>[
                                      FlatButton(
                                        onPressed: () {
                                          //debugPrint(name.text);
                                          if (formGlobalKey.currentState!
                                              .validate()) {
                                            context
                                                .read<Dashboardcubit>()
                                                .update(documentSnapshot.id,
                                                    name.text, age.text);
                                            Navigator.of(ctx).pop();
                                          }
                                        },
                                        child: const Text("Yes"),
                                      ),
                                      FlatButton(
                                        onPressed: () {
                                          Navigator.of(ctx).pop();
                                        },
                                        child: const Text("No"),
                                      ),
                                    ],
                                    content: SingleChildScrollView(
                                      child: Form(
                                        autovalidateMode:
                                            AutovalidateMode.onUserInteraction,
                                        key: formGlobalKey,
                                        child: Column(
                                          mainAxisSize: MainAxisSize.min,
                                          crossAxisAlignment:
                                              CrossAxisAlignment.stretch,
                                          children: <Widget>[
                                            TextFormField(
                                              style: const TextStyle(
                                                  fontSize: 25),
                                              controller: name,
                                              validator: (value) {
                                                if (value!.isEmpty) {
                                                  return 'Please enter valid name';
                                                }
                                                return null;
                                              },
                                              decoration: const InputDecoration(
                                                labelText: 'Name',
                                              ),
                                            ),
                                            TextFormField(
                                              style: const TextStyle(
                                                  fontSize: 25),
                                              controller: age,
                                              validator: (value) {
                                                if (value!.isEmpty) {
                                                  return 'Please enter valid age';
                                                }
                                                return null;
                                              },
                                              decoration: const InputDecoration(
                                                labelText: 'Age',
                                              ),
                                              textInputAction:
                                                  TextInputAction.next,
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                              // onPressed: () =>
                              //     _createOrUpdate(documentSnapshot)),
                              // This icon button is used to delete a single product
                              IconButton(
                                icon: const Icon(Icons.delete),
                                // onPressed: () => _deleteProduct(documentSnapshot.id)),
                                onPressed: () {
                                  context
                                      .read<Dashboardcubit>()
                                      .deleteddata(documentSnapshot.id);
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                );
              }

              return const Center(
                child: CircularProgressIndicator(),
              );
            },
          ),

          floatingActionButton: FloatingActionButton(
            // onPressed: () => _createOrUpdate(),
            onPressed: () => showDialog(
              context: context,
              builder: (ctx) => AlertDialog(
                title:
                    const Text("Enter your details", style: TextStyle(fontSize: 25)),
                actions: <Widget>[
                  ElevatedButton(
                    onPressed: () {
                      if (formGlobalKey.currentState!.validate()) {
                        context
                            .read<Dashboardcubit>()
                            .adddata(_nameController.text, _ageController.text);
                        _nameController.clear();
                        _ageController.clear();
                        Navigator.of(ctx).pop();
                      }
                    },
                    child: const Text("Yes"),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.of(ctx).pop();
                    },
                    child: const Text("No"),
                  ),
                ],
                content: SingleChildScrollView(
                  child: Form(
                    autovalidateMode: AutovalidateMode.onUserInteraction,
                    key: formGlobalKey,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: <Widget>[
                        TextFormField(
                          style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 25),
                          validator: (value) {
                            if (value!.isEmpty) {
                              return 'Please enter valid name';
                            }
                            return null;
                          },
                          controller: _nameController,
                          // initialValue: documentSnapshot['name'],
                          decoration: const InputDecoration(
                            labelText: 'Name',
                          ),
                        ),
                        TextFormField(
                          style: const TextStyle(
                              fontSize: 25),
                          controller: _ageController,
                          validator: (value) {
                            if (value!.isEmpty) {
                              return 'Please enter valid data';
                            }
                            return null;
                          },
                          //initialValue: documentSnapshot['age'],
                          decoration: const InputDecoration(
                            labelText: 'Age',
                          ),
                          textInputAction: TextInputAction.next,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
            child: const Icon(Icons.add),
          ),
        );
      },
    );
  }
}

void _navigateToLoginScreen(BuildContext context) {
  Navigator.of(context).push(MaterialPageRoute(
      builder: (context) =>
          BlocProvider(create: (context) => LoginCubit(), child: Loginpage())));
}